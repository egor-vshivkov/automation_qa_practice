{"uid":"8a5fb965c4eb3b09","name":"test_get_one_post","fullName":"pytest_and_unittest.test_dir1.test_pytest#test_get_one_post","historyId":"1c0ec824027d337b3633c2f08625c828","time":{"start":1760636258008,"stop":1760636258988,"duration":980},"status":"failed","statusMessage":"AssertionError: assert {} == {11}\n  \n  Full diff:\n  \u001B[0m\u001B[92m+ {}\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[91m- {\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[91m-     11,\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[91m- }\u001B[39;49;00m\u001B[90m\u001B[39;49;00m","statusTrace":"new_post_id = 101, hello = None\n\n    @allure.feature('Posts')\n    @allure.story('Get posts')\n    @pytest.mark.smoke\n    def test_get_one_post(new_post_id, hello):\n        print('test')\n        with allure.step(f'Run get request for post with id {new_post_id}'):\n            response = requests.get(f'https://jsonplaceholder.typicode.com/posts/{new_post_id}').json()\n        with allure.step(f'Check that post id is {new_post_id}'):\n>           assert response == {11}\nE           assert {} == {11}\nE             \nE             Full diff:\nE             \u001B[0m\u001B[92m+ {}\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE             \u001B[91m- {\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE             \u001B[91m-     11,\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE             \u001B[91m- }\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n\npytest_and_unittest\\test_dir1\\test_pytest.py:24: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":true,"beforeStages":[{"name":"_session_faker","time":{"start":1760636257161,"stop":1760636257266,"duration":105},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"hello","time":{"start":1760636257266,"stop":1760636257266,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"new_post_id","time":{"start":1760636257266,"stop":1760636258005,"duration":739},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert {} == {11}\n  \n  Full diff:\n  \u001B[0m\u001B[92m+ {}\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[91m- {\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[91m-     11,\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[91m- }\u001B[39;49;00m\u001B[90m\u001B[39;49;00m","statusTrace":"new_post_id = 101, hello = None\n\n    @allure.feature('Posts')\n    @allure.story('Get posts')\n    @pytest.mark.smoke\n    def test_get_one_post(new_post_id, hello):\n        print('test')\n        with allure.step(f'Run get request for post with id {new_post_id}'):\n            response = requests.get(f'https://jsonplaceholder.typicode.com/posts/{new_post_id}').json()\n        with allure.step(f'Check that post id is {new_post_id}'):\n>           assert response == {11}\nE           assert {} == {11}\nE             \nE             Full diff:\nE             \u001B[0m\u001B[92m+ {}\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE             \u001B[91m- {\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE             \u001B[91m-     11,\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE             \u001B[91m- }\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n\npytest_and_unittest\\test_dir1\\test_pytest.py:24: AssertionError","steps":[{"name":"Run get request for post with id 101","time":{"start":1760636258008,"stop":1760636258980,"duration":972},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"Check that post id is 101","time":{"start":1760636258980,"stop":1760636258985,"duration":5},"status":"failed","statusMessage":"AssertionError: assert {} == {11}\n  \n  Full diff:\n  \u001B[0m\u001B[92m+ {}\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[91m- {\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[91m-     11,\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[91m- }\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n","statusTrace":"  File \"C:\\Users\\Egor\\projects\\automation_qa_practice\\pytest_and_unittest\\test_dir1\\test_pytest.py\", line 24, in test_get_one_post\n    assert response == {11}\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true}],"attachments":[{"uid":"f78b94dc1c64f94c","name":"stdout","source":"f78b94dc1c64f94c.txt","type":"text/plain","size":33}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"attachmentStep":false,"stepsCount":2,"hasContent":true},"afterStages":[{"name":"new_post_id::0","time":{"start":1760636259139,"stop":1760636259862,"duration":723},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"hello::0","time":{"start":1760636263584,"stop":1760636263584,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"story","value":"Get posts"},{"name":"feature","value":"Posts"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"pytest_and_unittest.test_dir1"},{"name":"suite","value":"test_pytest"},{"name":"host","value":"Egor-PC"},{"name":"thread","value":"9460-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"pytest_and_unittest.test_dir1.test_pytest"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e3f72e42bb5ccb6b","status":"failed","statusDetails":"AssertionError: assert {} == {11}\n  \n  Full diff:\n  \u001B[0m\u001B[92m+ {}\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[91m- {\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[91m-     11,\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[91m- }\u001B[39;49;00m\u001B[90m\u001B[39;49;00m","time":{"start":1760635354633,"stop":1760635355302,"duration":669}},{"uid":"832dee96963b0604","status":"passed","time":{"start":1760635123771,"stop":1760635124407,"duration":636}},{"uid":"8c078f17168dfbc2","status":"broken","statusDetails":"KeyError: 'id'","time":{"start":1760635010458,"stop":1760635011091,"duration":633}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"7714aa9716f630bf","status":"broken","statusDetails":"KeyError: 'id'","time":{"start":1760635010458,"stop":1760635011091,"duration":633}}]},"tags":["smoke"]},"source":"8a5fb965c4eb3b09.json","parameterValues":[]}